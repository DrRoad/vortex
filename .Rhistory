d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-5, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(112213)
x1 <- rnorm(30, 5, 2)
set.seed(111213)
x2 <- rnorm(30, 10, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-5, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(112213)
x1 <- rnorm(30, 5, 2)
set.seed(111213)
x2 <- rnorm(30, 11, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-5, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
shiny::runApp('Documents/vortex/shiny/app1')
p <- arrangeGrob(plot(1,1), plot(1,1))
p
dev.off()
p <- arrangeGrob(plot(1,1), plot(1,1))
shiny::runApp('Documents/vortex/shiny/app1')
?png
runApp('Documents/vortex/shiny/app1')
shiny::runApp('Documents/vortex/shiny/app1')
?downloadButton
shiny::runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
beforeparens(input$envvar)
runApp('Documents/vortex/shiny/app1')
p1 <- ggplot(data.frame(x=1,y=1), aes(x,y)) + geom_point()
p1
?par
par(mfrow=c(1,2))
plot(1,1)
plot(1,1)
plot(1,1)
plot(1,1)
dev.off()
plot(1,1)
plot.new()
plot(1,1)
dev.off()
p2 <- plot(1,1)
plot.new()
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
plot(1,1, vp=vp.map)
plot.new()
plot.new()
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
plot(1,1, vp=vp.map)
plot.new()
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
print(plot(1,1), vp=vp.map)
plot.new()
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
print(plot(1,1), vp=vp.map)
plot.new()
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
print(p1, vp=vp.map)
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
print(p1, vp=vp.scatter)
dev.off()
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
print(p1, vp=vp.scatter)
print(plot(1,1), vp=vp.map)
?pushViewport
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
print(p1, vp=vp.scatter)
pushViewport(vp.map)
plot(1,1)
?viewport
p2 <- plot(1,1)
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
print(p2, vp=vp.scatter)
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
plot(p1, vp=vp.scatter)
pushViewport(vp.map)
grid.rect()
plot(1,1)
popViewport(2)
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
plot(p1, vp=vp.scatter)
pushViewport(vp.map)
grid.rect()
par(plt = gridPLT(), new=TRUE)
plot(1,1)
popViewport(2)
library(gridBase)
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
plot(p1, vp=vp.scatter)
pushViewport(vp.map)
grid.rect()
par(plt = gridPLT(), new=TRUE)
plot(1,1)
popViewport(2)
plot.new()
vp.scatter <- viewport(height=unit(1, "npc"), width=unit(0.4, "npc"),
just=c("left","top"),
y=1, x=0)
vp.map <- viewport(height=unit(1, "npc"), width=unit(0.6, "npc"),
just=c("left","top"),
y=1, x=0.4)
plot(p1, vp=vp.scatter)
pushViewport(vp.map)
grid.rect()
par(plt = gridPLT(), new=TRUE)
plot(1,1)
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
str(e)
vars
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
library(dplyr)
library(tidyr)
library(maps)
library(mapproj)
library(stringr)
# load data
ds <- read.csv("data/cleanedsocial.csv", stringsAsFactors=F) %>%
mutate(fips = as.integer(paste0(state_fips, str_pad(county_fips, 3, "left", 0)))) %>%
select(-STNAME, -CTYNAME, -state_fips, -county_fips, -land_area)
dr <- read.csv("data/cleanedrisk.csv", stringsAsFactors=F) %>%
#select(-land_area) %>%
mutate(state_fips=as.integer(state_fips),
county_fips=as.integer(county_fips)) %>%
mutate(fips = as.integer(paste0(state_fips, str_pad(county_fips, 3, "left", 0)))) %>%
select(-CTYNAME, -state_fips, -county_fips)
# fips-to-name dictionary from maps library;
FIPS <- maps::county.fips
FIPS$polyname <- as.character(FIPS$polyname)
FIPS$polyname[FIPS$polyname=="florida,miami-dade"] <- "florida,dade"
# a clean counties table with the proper number and order of counties for plotting
cty <- readRDS("data/counties.rds") %>%
mutate(polyname = name) %>%
select(polyname) %>%
left_join(., FIPS) %>%
mutate(ID=1:length(polyname))
#if(!all.equal(ds$fips, dr$fips)) stop("social and risk data are misaligned")
e <- cbind(dr, select(ds, -fips))
fill <- function(x) na.omit(x)[1]
e <- left_join(cty, e) %>%
group_by(ID) %>%
summarise_each(funs(fill)) %>%
ungroup() %>%
filter(!duplicated(ID))
#if(!all.equal(cty$fips, e$fips)) stop("incorrect county structure")
e <- as.data.frame(e)
# fill in some missing values -- this is a patch that should maybe be transferred to the data prep scripts
na2min <- function(x){
x[is.na(x) | x<0] <- min(na.omit(x[x>=0]))
return(x)
}
e <- mutate_each_(e, funs(na2min), names(e)[grepl("tot_intensity", names(e))]) %>%
mutate(population_density = TOTPOP/land_area,
Income_Dollars = as.integer(as.character(sub(",", "", Income_Dollars))))
# variable names dictionary and translation functions
vars <- read.csv("data/variable_names", stringsAsFactors=F) %>%
filter(category != "other") %>%
arrange(desc(category), display)
r2d <- function(x) vars$display[match(x, vars$raw)]
d2r <- function(x) vars$raw[match(x, vars$display)]
g2r <- function(x) vars$raw[match(x, vars$group)]
# fake inputs for dev/debugging -- not used
input <- list(xv=vars$display[vars$category=="social"][1],
yv=vars$display[vars$category=="risk"][1],
xscale="linear",
yscale="linear",
smoother="none",
region="USA",
palette="inferno",
transpose_palette=F,
groups=na.omit(vars$group[vars$group!=""])[1:2],
envvar=vars$display[vars$category=="risk"][1],
scale="linear",
histogram_region="USA")
beforeparens <- function(x){
if(grepl("\\(", x)) return(substr(x, 1, regexpr("\\(", x)[1]-2))
return(x)}
capfirst <- function(x) paste0(toupper(substr(x,1,1)), substr(x,2,nchar(x)))
s <- data.frame(e[,g2r(input$groups)])
s <- as.data.frame(as.matrix(s) * e$TOTPOP)
if(ncol(s)==1) names(s) <- g2r(input$groups)
names(s) <- input$groups
v <- e[,d2r(input$envvar)]
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
g <- data.frame(state=as.character(e$STNAME)) %>%
cbind(v) %>%
cbind(s) %>%
tidyr::gather(group, pop, -v, -state) %>%
dplyr::group_by(group) %>%
mutate(prop_pop = pop / sum(na.omit(pop)),
group=factor(group)) %>%
na.omit()
if(input$histogram_region != "USA") g <- filter(g, state==input$histogram_region)
m <- group_by(g(), group) %>% dplyr::summarize(wmean = weighted.mean(v, pop))
m <- group_by(g, group) %>% dplyr::summarize(wmean = weighted.mean(v, pop))
m
ggplot(g(), aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m(), aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
dev.off()
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
head(g)
ggplot(g(), aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
dev.off()
dev.off()
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
?gridPLT
runApp('Documents/vortex/shiny/app1')
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_area(alpha=.2, size=.75)
?geom_area
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_area(alpha=.2, size=.75, stat=..count..)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_area(alpha=.2, size=.75, stat="count")
dev.off()
dev.off()
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_area(alpha=.2, size=.75, stat="count")
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_freqpoly(alpha=.2, size=.75)
?geom_freqpoly
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_freqpoly(alpha=.2, size=.75, stat="density")
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_freqpoly(size=.75, stat="density")
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_freqpoly(size=.75, stat=..density..)
ggplot(g, aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_freqpoly(size=.75)
ggplot(g, aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_freqpoly(size=.75, bins=20)
ggplot(g, aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(size=.75, bins=20)
ggplot(g, aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(size=.75)
ggplot(g, aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(size=.75, alpha=.5)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(size=.75, alpha=.5)
g <- g() %>%
group_by(group) %>%
mutate(prop_pop = prop_pop/sum(na.omit(prop_pop)))
g <- g() %>%
group_by(group) %>%
mutate(prop_pop = prop_pop/sum(na.omit(prop_pop)))
g <- g %>%
group_by(group) %>%
mutate(prop_pop = prop_pop/sum(na.omit(prop_pop)))
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
g <- g() %>%
#group_by(group) %>%
mutate(prop_pop = prop_pop/sum(na.omit(prop_pop)))
g <- g %>%
#group_by(group) %>%
mutate(prop_pop = prop_pop/sum(na.omit(prop_pop)))
ggplot(g(), aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop/sum(prop_pop), color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
s <- data.frame(e[,g2r(input$groups)])
s <- as.data.frame(as.matrix(s) * e$TOTPOP)
if(ncol(s)==1) names(s) <- g2r(input$groups)
names(s) <- input$groups
v <- e[,d2r(input$envvar)]
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
g <- data.frame(state=as.character(e$STNAME)) %>%
cbind(v) %>%
cbind(s) %>%
tidyr::gather(group, pop, -v, -state) %>%
dplyr::group_by(group) %>%
mutate(prop_pop = pop / sum(na.omit(pop)),
group=factor(group)) %>%
na.omit()
ggplot(g(), aes(v, weight=prop_pop/sum(prop_pop), color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop/sum(prop_pop), color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g(), aes(v, weight=prop_pop/sum(prop_pop, na.rm-T), color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g(), aes(v, weight=prop_pop/sum(prop_pop, na.rm=T), color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop/sum(prop_pop, na.rm=T), color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_histogram(stat="density", alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_histogram(stat=..density.., alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_histogram(stat="density", alpha=.2, size=.75)
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_histogram()
ggplot(g, aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_histogram()
ggplot(g, aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_histogram(position="identity", alpha=.2)
ggplot() +
geom_density(data=g(),
aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group)),
adjust=2, alpha=.2, size=.75, position="identity")
ggplot() +
geom_density(data=g,
aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group)),
adjust=2, alpha=.2, size=.75, position="identity")
runApp('Documents/vortex/shiny/app1')
ggplot() +
geom_freqpoly(data=g(),
aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group)),
alpha=1, size=.5, bins=15, position="identity")
ggplot() +
geom_freqpoly(data=g,
aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group)),
alpha=1, size=.5, bins=15, position="identity")
ggplot() +
geom_area(data=g(),
aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group)),
alpha=1, size=.5, bins=15, position="identity", stat="bin")
ggplot() +
geom_area(data=g,
aes(v, ..density.., weight=prop_pop, color=factor(group), fill=factor(group)),
alpha=1, size=.5, bins=15, position="identity", stat="bin")
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
names(e)
str(e)
runApp('Documents/vortex/shiny/app1')
source('~/Documents/vortex/code/tornado_wind_hail.R', echo=TRUE)
files
files <- list.files("raw_data/tornado_wind_hail", pattern="\\.csv", full.names=T)
files
setwd("~/documents/vortex")
files <- list.files("raw_data/tornado_wind_hail", pattern="\\.csv", full.names=T)
names(files) <- c("hail", "tornado", "wind")
source('~/Documents/vortex/code/tornado_wind_hail.R', echo=TRUE)
d <- lapply(files, load_data)
d <- lapply(files[1], load_data)
path=files[1]
path
d <- read.csv(path, header=F, stringsAsFactors=F)
path=files[2]
d <- read.csv(path, header=F, stringsAsFactors=F)
path=files[3]
d <- read.csv(path, header=F, stringsAsFactors=F)
head(d)
files
read.csv(files[2])
read.csv(files[1])
read.csv(files[3])
download.file("http://www.spc.noaa.gov/wcm/data/Actual_tornadoes.csv",
"raw_data/tornado_wind_hail/tornado_raw.csv")
download.file("http://www.spc.noaa.gov/wcm/data/1955-2015_wind.csv.zip",
"raw_data/tornado_wind_hail/wind_raw.csv.zip")
download.file("http://www.spc.noaa.gov/wcm/data/1955-2015_hail.csv.zip",
"raw_data/tornado_wind_hail/hail_raw.csv.zip")
?unzip
unzip("raw_data/tornado_wind_hail/wind_raw.zip")
unzip("raw_data/tornado_wind_hail/wind_raw.zip")
unz("raw_data/tornado_wind_hail/wind_raw.zip")
?uzip
?unzip
?unzip
unzip("raw_data/tornado_wind_hail/wind_raw.zip", exdir="raw_data/tornado_wind_hail/")
unzip("raw_data/tornado_wind_hail/hail_raw.zip", exdir="raw_data/tornado_wind_hail/")
files <- list.files("raw_data/tornado_wind_hail", pattern="\\.csv", full.names=T)
fiels
files
names(files) <- c("hail", "wind", "tornado")
