<<<<<<< HEAD
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(1122)
x1 <- rnorm(30, 5, 2)
set.seed(1112)
x2 <- rnorm(30, 5, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-1.6, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(11221)
x1 <- rnorm(30, 5, 2)
set.seed(11121)
x2 <- rnorm(30, 5, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-1.6, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(112213)
x1 <- rnorm(30, 5, 2)
set.seed(111213)
x2 <- rnorm(30, 5, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-1.6, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(112213)
x1 <- rnorm(30, 5, 2)
set.seed(111213)
x2 <- rnorm(30, 5, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-5, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(112213)
x1 <- rnorm(30, 5, 2)
set.seed(111213)
x2 <- rnorm(30, 10, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-5, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
set.seed(112213)
x1 <- rnorm(30, 5, 2)
set.seed(111213)
x2 <- rnorm(30, 11, 2)
d=data.frame(x=c(x1, x2), y=rep(1:2, each=30), year=1950:2009)
norms <- d %>%
group_by(y) %>%
summarize(x=mean(x),
start=min(year),
end=max(year))
d$anomaly <- d$x - norms$x[norms$y==1]
norms$anomaly <- norms$x - norms$x[norms$y==1]
d$y[abs(d$anomaly)>(norms$anomaly[norms$y==2]) & d$y==1] <- 3
z <- length(d$y[d$y==3])
ggplot(d, aes(year, anomaly, color=factor(y))) +
geom_point(size=3) +
geom_segment(data=norms, aes(x=start, xend=end, y=anomaly, yend=anomaly, color=factor(y))) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly, yend=anomaly, color=factor(y)), linetype=2) +
geom_segment(data=norms, aes(x=1950, xend=1979, y=anomaly*-1, yend=anomaly*-1, color=factor(y)), linetype=2) +
scale_color_manual(values=c("black", "darkred", "blue")) +
theme(line=element_blank(), rect=element_blank(), legend.position="none") +
annotate(geom="text", x=1995, y=-5, label=paste0("Typicality of recent normal:\n", z, "/30 = ", round(z/30, 2)), hjust=.5, color="blue", size=5) +
labs(y="Anomaly: Min. temp. of coldest month (deg C)")
shiny::runApp('Documents/vortex/shiny/app1')
source('~/.active-rstudio-document', echo=TRUE)
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
runApp('Documents/vortex/shiny/app1')
library(dplyr)
library(tidyr)
library(maps)
library(mapproj)
library(stringr)
# load data
ds <- read.csv("data/cleanedsocial.csv", stringsAsFactors=F) %>%
mutate(fips = as.integer(paste0(state_fips, str_pad(county_fips, 3, "left", 0)))) %>%
select(-STNAME, -CTYNAME, -state_fips, -county_fips, -land_area)
dr <- read.csv("data/cleanedrisk.csv", stringsAsFactors=F) %>%
#select(-land_area) %>%
mutate(state_fips=as.integer(state_fips),
county_fips=as.integer(county_fips)) %>%
mutate(fips = as.integer(paste0(state_fips, str_pad(county_fips, 3, "left", 0)))) %>%
select(-CTYNAME, -state_fips, -county_fips)
# fips-to-name dictionary from maps library;
FIPS <- maps::county.fips
FIPS$polyname <- as.character(FIPS$polyname)
FIPS$polyname[FIPS$polyname=="florida,miami-dade"] <- "florida,dade"
# a clean counties table with the proper number and order of counties for plotting
cty <- readRDS("data/counties.rds") %>%
mutate(polyname = name) %>%
select(polyname) %>%
left_join(., FIPS) %>%
mutate(ID=1:length(polyname))
#if(!all.equal(ds$fips, dr$fips)) stop("social and risk data are misaligned")
e <- cbind(dr, select(ds, -fips))
fill <- function(x) na.omit(x)[1]
e <- left_join(cty, e) %>%
group_by(ID) %>%
summarise_each(funs(fill)) %>%
ungroup() %>%
filter(!duplicated(ID))
#if(!all.equal(cty$fips, e$fips)) stop("incorrect county structure")
e <- as.data.frame(e)
# fill in some missing values -- this is a patch that should maybe be transferred to the data prep scripts
na2min <- function(x){
x[is.na(x) | x<0] <- min(na.omit(x[x>=0]))
return(x)
}
e <- mutate_each_(e, funs(na2min), names(e)[grepl("tot_intensity", names(e))]) %>%
mutate(population_density = TOTPOP/land_area,
Income_Dollars = as.integer(as.character(sub(",", "", Income_Dollars))))
# variable names dictionary and translation functions
vars <- read.csv("data/variable_names", stringsAsFactors=F) %>%
filter(category != "other") %>%
arrange(desc(category), display)
r2d <- function(x) vars$display[match(x, vars$raw)]
d2r <- function(x) vars$raw[match(x, vars$display)]
g2r <- function(x) vars$raw[match(x, vars$group)]
# fake inputs for dev/debugging -- not used
input <- list(xv=vars$display[vars$category=="social"][1],
yv=vars$display[vars$category=="risk"][1],
xscale="linear",
yscale="linear",
smoother="none",
region="USA",
palette="inferno",
transpose_palette=F,
groups=na.omit(vars$group[vars$group!=""])[1],
envvar=vars$display[vars$category=="risk"][1],
scale="linear",
histogram_region="USA")
beforeparens <- function(x){
if(grepl("\\(", x)) return(substr(x, 1, regexpr("\\(", x)[1]-2))
return(x)}
capfirst <- function(x) paste0(toupper(substr(x,1,1)), substr(x,2,nchar(x)))
setwd("~/documents/vortex/shiny/app1")
library(dplyr)
library(tidyr)
library(maps)
library(mapproj)
library(stringr)
# load data
ds <- read.csv("data/cleanedsocial.csv", stringsAsFactors=F) %>%
mutate(fips = as.integer(paste0(state_fips, str_pad(county_fips, 3, "left", 0)))) %>%
select(-STNAME, -CTYNAME, -state_fips, -county_fips, -land_area)
dr <- read.csv("data/cleanedrisk.csv", stringsAsFactors=F) %>%
#select(-land_area) %>%
mutate(state_fips=as.integer(state_fips),
county_fips=as.integer(county_fips)) %>%
mutate(fips = as.integer(paste0(state_fips, str_pad(county_fips, 3, "left", 0)))) %>%
select(-CTYNAME, -state_fips, -county_fips)
# fips-to-name dictionary from maps library;
FIPS <- maps::county.fips
FIPS$polyname <- as.character(FIPS$polyname)
FIPS$polyname[FIPS$polyname=="florida,miami-dade"] <- "florida,dade"
# a clean counties table with the proper number and order of counties for plotting
cty <- readRDS("data/counties.rds") %>%
mutate(polyname = name) %>%
select(polyname) %>%
left_join(., FIPS) %>%
mutate(ID=1:length(polyname))
#if(!all.equal(ds$fips, dr$fips)) stop("social and risk data are misaligned")
e <- cbind(dr, select(ds, -fips))
fill <- function(x) na.omit(x)[1]
e <- left_join(cty, e) %>%
group_by(ID) %>%
summarise_each(funs(fill)) %>%
ungroup() %>%
filter(!duplicated(ID))
#if(!all.equal(cty$fips, e$fips)) stop("incorrect county structure")
e <- as.data.frame(e)
# fill in some missing values -- this is a patch that should maybe be transferred to the data prep scripts
na2min <- function(x){
x[is.na(x) | x<0] <- min(na.omit(x[x>=0]))
return(x)
}
e <- mutate_each_(e, funs(na2min), names(e)[grepl("tot_intensity", names(e))]) %>%
mutate(population_density = TOTPOP/land_area,
Income_Dollars = as.integer(as.character(sub(",", "", Income_Dollars))))
# variable names dictionary and translation functions
vars <- read.csv("data/variable_names", stringsAsFactors=F) %>%
filter(category != "other") %>%
arrange(desc(category), display)
r2d <- function(x) vars$display[match(x, vars$raw)]
d2r <- function(x) vars$raw[match(x, vars$display)]
g2r <- function(x) vars$raw[match(x, vars$group)]
# fake inputs for dev/debugging -- not used
input <- list(xv=vars$display[vars$category=="social"][1],
yv=vars$display[vars$category=="risk"][1],
xscale="linear",
yscale="linear",
smoother="none",
region="USA",
palette="inferno",
transpose_palette=F,
groups=na.omit(vars$group[vars$group!=""])[1],
envvar=vars$display[vars$category=="risk"][1],
scale="linear",
histogram_region="USA")
beforeparens <- function(x){
if(grepl("\\(", x)) return(substr(x, 1, regexpr("\\(", x)[1]-2))
return(x)}
capfirst <- function(x) paste0(toupper(substr(x,1,1)), substr(x,2,nchar(x)))
library(plyr)
library(markdown)
library(devtools)
library(maps)
library(mapproj)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
if(!require(colormap)) install_github("matthewkling/colormap", "colormap") # Add the package colormap that Matt created because he's a bamf.
select <- dplyr::select
s <- data.frame(e[,g2r(input$groups)])
s <- as.data.frame(as.matrix(s) * e$TOTPOP)
if(ncol(s)==1) names(s) <- g2r(input$groups)
names(s) <- input$groups
v <- e[,d2r(input$envvar)]
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
g <- data.frame(state=as.character(e$STNAME)) %>%
cbind(v) %>%
cbind(s) %>%
tidyr::gather(group, pop, -v, -state) %>%
dplyr::group_by(group) %>%
mutate(prop_pop = pop / sum(na.omit(pop))) %>%
na.omit()
if(input$histogram_region != "USA") g <- filter(g, state==input$histogram_region)
m <- summarize(g(), wmean = weighted.mean(v, pop))
m <- summarize(g, wmean = weighted.mean(v, pop))
ggplot(g(), aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m(), aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
ggplot2::ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
str(g)
names(g)
ggplot2::ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
g$group <- factor(g$group)
ggplot2::ggplot(g, aes(v, weight=prop_pop, color=group, fill=group)) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=group), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
m <- summarize(g(), wmean = weighted.mean(v, pop))
m <- summarize(g, wmean = weighted.mean(v, pop))
ggplot2::ggplot(g, aes(v, weight=prop_pop, color=group, fill=group)) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=group), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
ggplot2::ggplot(g, aes(v, weight=prop_pop, color=group, fill=group)) +
geom_density(adjust=2, alpha=.2, size=.75)
ggplot2::ggplot(g, aes(v, weight=prop_pop, color=group, fill=group)) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=group), size=1.5)
str(m)
str(g)
m <- summarize(g(), wmean = weighted.mean(v, pop))
m <- summarize(g, wmean = weighted.mean(v, pop))
m
str(g)
m <- group_by(g()) %>% summarize(wmean = weighted.mean(v, pop))
m <- group_by(g) %>% summarize(wmean = weighted.mean(v, pop))
m <- group_by(g(), group) %>% summarize(wmean = weighted.mean(v, pop))
m <- group_by(g, group) %>% summarize(wmean = weighted.mean(v, pop))
m
str(g)
runApp()
str(g)
m
input <- list(xv=vars$display[vars$category=="social"][1],
yv=vars$display[vars$category=="risk"][1],
xscale="linear",
yscale="linear",
smoother="none",
region="USA",
palette="inferno",
transpose_palette=F,
groups=na.omit(vars$group[vars$group!=""])[1:2],
envvar=vars$display[vars$category=="risk"][1],
scale="linear",
histogram_region="USA")
input
s <- data.frame(e[,g2r(input$groups)])
s <- as.data.frame(as.matrix(s) * e$TOTPOP)
if(ncol(s)==1) names(s) <- g2r(input$groups)
names(s) <- input$groups
v <- e[,d2r(input$envvar)]
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
g <- data.frame(state=as.character(e$STNAME)) %>%
cbind(v) %>%
cbind(s) %>%
tidyr::gather(group, pop, -v, -state) %>%
dplyr::group_by(group) %>%
mutate(prop_pop = pop / sum(na.omit(pop))) %>%
na.omit()
if(input$histogram_region != "USA") g <- filter(g, state==input$histogram_region)
m <- group_by(g(), group) %>% summarize(wmean = weighted.mean(v, pop))
m <- group_by(g, group) %>% summarize(wmean = weighted.mean(v, pop))
ggplot(g(), aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m(), aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
ggplot(g, aes(v, weight=prop_pop, color=factor(group), fill=factor(group))) +
geom_density(adjust=2, alpha=.2, size=.75) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(group)), size=1.5) +
theme_minimal() +
theme(axis.text.y=element_blank(),
text=element_text(size=20),
legend.position="top") +
labs(x=input$envvar,
y="\nrelative proportion of group",
color="group", fill="group")
m
str(g)
table(g$group)
m <- group_by(g(), group) %>% summarize(wmean = weighted.mean(v, pop))
m <- group_by(g, group) %>% summarize(wmean = weighted.mean(v, pop))
m
g <- data.frame(state=as.character(e$STNAME)) %>%
cbind(v) %>%
cbind(s) %>%
tidyr::gather(group, pop, -v, -state) %>%
dplyr::group_by(group) %>%
mutate(prop_pop = pop / sum(na.omit(pop)),
group=factor(group)) %>%
na.omit()
str(g)
m <- group_by(g, group) %>% summarize(wmean = weighted.mean(v, pop))
m
?group_by
m <- group_by(g(), group) %>% dplyr::summarize(wmean = weighted.mean(v, pop))
m <- group_by(g, group) %>% dplyr::summarize(wmean = weighted.mean(v, pop))
m
runApp()
str(e)
runApp()
library(mgcv)
?downloadHandler
library(grid)
library(gridExtra)
runApp()
input
plot(1,1)
shiny::runApp()
isntall.packages(gridExtra)
install.packages(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(plyr)
library(markdown)
library(devtools)
library(maps)
library(mapproj)
library(ggplot2)
library(grid)
library(gridExtra)
library(gridBase)
library(dplyr)
library(tidyr)
library(stringr)
library(mgcv)
install.r
??INSTALL
library(plyr)
library(markdown)
library(devtools)
library(maps)
library(mapproj)
library(ggplot2)
library(grid)
library(gridExtra)
library(gridBase)
install.packages("gridBase")
library(dplyr)
library(tidyr)
library(stringr)
library(mgcv)
runApp()
runApp()
runApp()
setwd("~/documents/vortex")
=======
?download.file
CC2014 <-download.file("https://www.census.gov/popest/data/counties/asrh/2014/files/CC-EST2014-ALLDATA.csv", "raw_data/census/CensusRaceEst/CC-EST2014-ALLDATA.csv", curl)
CC2014 <-download.file("https://www.census.gov/popest/data/counties/asrh/2014/files/CC-EST2014-ALLDATA.csv", "raw_data/census/CensusRaceEst/CC-EST2014-ALLDATA.csv", "auto")
set.wd(..)
setwd(..)
setwd("..")
CC2014 <-download.file("https://www.census.gov/popest/data/counties/asrh/2014/files/CC-EST2014-ALLDATA.csv", "raw_data/census/CensusRaceEst/CC-EST2014-ALLDATA.csv", "auto")
view(CC2014)
View(CC2014)
CC2014 <- read.csv("raw_data/census/CensusRaceEst/CC-EST2014-ALLDATA.csv")
source('C:/Users/User1/Desktop/TrimmingCensusRaceData.R')
>>>>>>> a3bef2a984711b87c6c4e7e415571730b4525d2c
