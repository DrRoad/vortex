i=4
x<-counts
x
watershed<-function(x) {
leftmax<-as.vector(NULL)
rightmax<-as.vector(NULL)
LM <- function(x) {
for (i in 1:length(x)){
leftmax[i]<-max(x[1:i]) }
print(leftmax)}
RM <- function(x) {
for (i in 1:length(x)){
rightmax[i]<-max(x[1:i]) }
print(rightmax)}
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  {print(min(leftmax[i], rightmax[i]) - x[i])}
}}
min(leftmax[i], rightmax[i])
watershed<-function(x) {
leftmax<-as.vector(NULL)
rightmax<-as.vector(NULL)
LM <- function(x) {
for (i in 1:length(x)){
leftmax[i]<-max(x[1:i]) }}
RM <- function(x) {
for (i in 1:length(x)){
rightmax[i]<-max(x[1:i]) }}
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  {print(min(leftmax[i], rightmax[i]) - x[i])}
}}
min(leftmax[i], rightmax[i])
leftmax<-as.vector(NULL)
rightmax<-as.vector(NULL)
watershed<-function(x) {
LM <- function(x) {
for (i in 1:length(x)){
leftmax[i]<-max(x[1:i]) }}
RM <- function(x) {
for (i in 1:length(x)){
rightmax[i]<-max(x[1:i]) }}
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  {print(min(leftmax[i], rightmax[i]) - x[i])}
}}
watershed(counts)
leftmax<-as.vector(NULL)
rightmax<-as.vector(NULL)
LM <- function(x) {
for (i in 1:length(x)){
leftmax[i]<-max(x[1:i]) }}
return leftmax
RM <- function(x) {
for (i in 1:length(x)){
rightmax[i]<-max(x[1:i]) }}
watershed<-function(x) {
RM(x)
LM(x)
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  {print(min(leftmax[i], rightmax[i]) - x[i])}
}}
watershed(counts)
RM(counts)
RM <- function(x) {
rightmax<-as.vector(NULL)
for (i in 1:length(x)){
rightmax[i]<-max(x[1:i]) }
return (rightmax)}
RM(counts)
LM <- function(x) {
for (i in 1:length(x)){
leftmax[i]<-max(x[1:i]) }
return leftmax}
LM <- function(x) {
for (i in 1:length(x)){
leftmax[i]<-max(x[1:i]) }
return (leftmax) }
watershed<-function(x) {
leftmax<-LM(x)
rightmax<-RM(x)
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  {print(min(leftmax[i], rightmax[i]) - x[i])}
}}
watershed(counts)
cumsum(watershed(counts))
sum(watershed(counts))
aggregate(watershed(counts))
watershed<-function(x) {
leftmax<-LM(x)
rightmax<-RM(x)
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  { depths[i]<-(min(leftmax[i], rightmax[i]) - x[i])}
}
return(depths)}
watershed(counts)
watershed<-function(x) {
depths<- as.vector(NULL)
leftmax<-LM(x)
rightmax<-RM(x)
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  { depths[i]<-(min(leftmax[i], rightmax[i]) - x[i])}
}
return(depths)}
sum(watershed(counts))
watershed(counts)
watershed<-function(x) {
depths<- as.vector(NULL)
leftmax<-LM(x)
rightmax<-RM(x)
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  { depths[i]<-(min(leftmax[i], rightmax[i]) - x[i])}
}
return(na.omit(depths))}
sum(watershed(counts))
barplot(counts)
counts<- c(7,3,2,4,6,8,4,5,8,1)
barplot(coutns)
barplot(counts)
sum(watershed(counts))
4+5+3+1+4+3
LM(counts)
RM(counts)
LM <- function(x) {
leftmax<-as.vector(NULL)
for (i in 1:length(x)){
leftmax[i]<-max(x[1:i]) }
return (leftmax) }
RM <- function(x) {
rightmax<-as.vector(NULL)
for (i in 1:length(x)){
rightmax[i]<-max(x[i:length(x)]) }
return (rightmax)}
RM(counts)
watershed<-function(x) {
depths<- as.vector(NULL)
leftmax<-LM(x)
rightmax<-RM(x)
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  { depths[i]<-(min(leftmax[i], rightmax[i]) - x[i])}
}
return(na.omit(depths))}
sum(watershed(counts))
counts(1,2,3,4,5,4,3,2,1)
counts<-c(1,2,3,4,5,4,3,2,1)
sum(watershed(counts))
watershed<-function(x) {
depths<- as.vector(NULL)
leftmax<-LM(x)
rightmax<-RM(x)
for (i in 1:length(x)){
if (leftmax[i] > x[i] | rightmax[i]> x[i])  { depths[i]<-(min(leftmax[i], rightmax[i]) - x[i])}
}
return(sum(na.omit(depths)))}
watershed(counts)
counts<- c(1,3,2,4,6,8,4,5,8,1)
watershed(counts)
barplot(counts)
counts<- c(1,3,2,4,2,8,4,5,8,1)
watershed(counts)
barplot(counts)
counts<- c(10,3,2,4,2,8,4,5,8,7)
watershed(counts)
barplot(counts)
5+6+4+6+4+3
load("C:/Users/User1/Dropbox/Australian Ticks/forColin.rdata")
View(LizMatData)
summary(LizMatData)
seasons<- c("1", "2", "3", "4")
then season[item,]<- "winter"}
season[item,]= "winter"}
for (item in season) {
if item == "1"
season[item,]= "winter"}
season["1"]
seasons["1"]
seasons["1",]
seasons["1"]
seasons[,"1"]
seasons<- c("1", "2", "3", "4", "1", "2", "3", "4")
seasons[item,]= "winter"}
for (item in seasons) {
if item == "1"
seasons[item,]= "winter"}
for (item in seasons) {
if item == "1"  seasons[item,]= "winter"}
if (item == "1")  seasons[item,]= "winter"}
for (item in seasons) {
if (item == "1")  seasons[item,]= "winter"}
season[item]
seasons[item]
seasons[item,]
seasons[item]
for (item in seasons) {
if (item == "1")  seasons[item]= "winter"}
seasons
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
install.packages("igraph")
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
library(nimble)
install.packages("nimble")
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
library(nimble)
library(nimble)
pumpCode <- nimbleCode({
for (i in 1:N){
theta[i] ~ dgamma(alpha,beta)
lambda[i] <- theta[i]*t[i]
x[i] ~ dpois(lambda[i])
}
alpha ~ dexp(1.0)
beta ~ dgamma(0.1,1.0)
})
pumpConsts <- list(N = 10,
t = c(94.3, 15.7, 62.9, 126, 5.24,
31.4, 1.05, 1.05, 2.1, 10.5))
pumpData <- list(x = c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22))
pumpInits <- list(alpha = 1, beta = 1,
theta = rep(0.1, pumpConsts$N))
pump <- nimbleModel(code = pumpCode, name = 'pump', constants = pumpConsts,
data = pumpData, inits = pumpInits)
pump$getNodeNames()
plot(pump$graph)
install.packages(""adehabitat"")
install.packages("adehabitat")
c= c(0,1,2,3)
plot(c)
# read data set
fires <- read.csv('../../data/forestfires.csv')
# open graphic device
png(file = '../../images/scatterplot.png')
# Your code for the scatterplot
plot(fires$temp, fires$wind, type="p")
# close device
dev.off()
load("C:/Users/User1/Downloads/Export_Output_20150710_SFldHazAr.txt")
load("C:/Users/User1/Downloads/Export_Output_20150710_SFldHazAr.txt")
install.packages("babynames")
library(ggplot2)
myname <- subset(babynames, name == "Dana")
# find the most popular year for your name
myname$year[which.max(myname$n)]
# number of people with your name so far
sum(myname$n)
myname <- subset(babynames, name == "Dana")
# find the most popular year for your name
myname$year[which.max(myname$n)]
# number of people with your name so far
sum(myname$n)
library(babynames)
myname <- subset(babynames, name == "Dana")
# find the most popular year for your name
myname$year[which.max(myname$n)]
# number of people with your name so far
sum(myname$n)
ggplot(data = myname, aes(x = year, y = n, color = sex)) +
geom_line() +
theme_bw()
shiny::runApp('C:/Users/User1/Desktop/Stat259/ShinyApp')
# merge county-level datasets into a single master table
install.packages(c("dplyr", "stringr", "rgdal", "raster", "rgeos"))
library(stringr)
library(rgdal)
library(raster)
library(rgeos)
setwd("~/documents/vortex")
# load data
files <- list.files("output/tidy_county_data", full.names=T)
tables <- lapply(files, read.csv, stringsAsFactors=F)
# build a combined state_county_fips variable in all tables that lack it
tables <- lapply(tables, function(x){
if(!"state_county_fips" %in% names(x)){
x$state_county_fips <- paste0(str_pad(x$state_fips, 2, "left", 0),
str_pad(x$county_fips, 3, "left", 0))
}else{
x$state_county_fips <- str_pad(x$state_county_fips, 5, "left", 0)
}
return(x)
})
# add dataset-specific tag to dataset-specific variable names to avoid name conflicts
for(i in 1:length(tables)) names(tables[[i]])[!grepl("_fips", names(tables[[i]]))] <-
paste0(gsub(".csv", "", basename(files[i])), "...", names(tables[[i]])[!grepl("_fips", names(tables[[i]]))])
# merge datasets
master <- Reduce(full_join, tables)
# add county area to table
counties <- readOGR("raw_data/census/us_counties_shapefile", "cb_2014_us_county_500k")
counties <- crop(counties, extent(-126, -59, 22, 53)) # crop to US48
counties <- data.frame(state_county_fips=counties$GEOID,
land_area=gArea(counties, byid=T))
master <- left_join(master, counties)
# export csv
write.csv(master, "output/master_county_data/master_county_data.csv", row.names=F)
setwd("~/vortex")
setwd("~/Desktop/vortex/vortex")
setwd("~/Desktop/Stat259vortex/vortex")
setwd("~/Desktop/Stat259/vortex/vortex")
getwd()
setwd("../Desktop/Stat259/vortex/vortex")
# load data
files <- list.files("output/tidy_county_data", full.names=T)
tables <- lapply(files, read.csv, stringsAsFactors=F)
# build a combined state_county_fips variable in all tables that lack it
tables <- lapply(tables, function(x){
if(!"state_county_fips" %in% names(x)){
x$state_county_fips <- paste0(str_pad(x$state_fips, 2, "left", 0),
str_pad(x$county_fips, 3, "left", 0))
}else{
x$state_county_fips <- str_pad(x$state_county_fips, 5, "left", 0)
}
return(x)
})
# add dataset-specific tag to dataset-specific variable names to avoid name conflicts
for(i in 1:length(tables)) names(tables[[i]])[!grepl("_fips", names(tables[[i]]))] <-
paste0(gsub(".csv", "", basename(files[i])), "...", names(tables[[i]])[!grepl("_fips", names(tables[[i]]))])
# merge datasets
master <- Reduce(full_join, tables)
# add county area to table
counties <- readOGR("raw_data/census/us_counties_shapefile", "cb_2014_us_county_500k")
counties <- crop(counties, extent(-126, -59, 22, 53)) # crop to US48
counties <- data.frame(state_county_fips=counties$GEOID,
land_area=gArea(counties, byid=T))
master <- left_join(master, counties)
# export csv
write.csv(master, "output/master_county_data/master_county_data.csv", row.names=F)
# load data
files <- list.files("output/tidy_county_data", full.names=T)
tables <- lapply(files, read.csv, stringsAsFactors=F)
# build a combined state_county_fips variable in all tables that lack it
tables <- lapply(tables, function(x){
if(!"state_county_fips" %in% names(x)){
x$state_county_fips <- paste0(str_pad(x$state_fips, 2, "left", 0),
str_pad(x$county_fips, 3, "left", 0))
}else{
x$state_county_fips <- str_pad(x$state_county_fips, 5, "left", 0)
}
return(x)
})
# add dataset-specific tag to dataset-specific variable names to avoid name conflicts
for(i in 1:length(tables)) names(tables[[i]])[!grepl("_fips", names(tables[[i]]))] <-
paste0(gsub(".csv", "", basename(files[i])), "...", names(tables[[i]])[!grepl("_fips", names(tables[[i]]))])
# merge datasets
master <- Reduce(full_join, tables)
# add county area to table
counties <- readOGR("raw_data/census/us_counties_shapefile", "cb_2014_us_county_500k")
counties <- crop(counties, extent(-126, -59, 22, 53)) # crop to US48
counties <- data.frame(state_county_fips=counties$GEOID,
land_area=gArea(counties, byid=T))
master <- left_join(master, counties)
# export csv
write.csv(master, "output/master_county_data/master_county_data.csv", row.names=F)
lower48income <- read.csv("C:/Users/User1/Desktop/Stat259/vortex/vortex/raw_data/income/lower48income.csv")
View(lower48income)
income<- subset(lower48income, state_fips != NA)
income<- na.omit(lower48income)
View(income)
getwd()
write.csv(income, "~output/tidy_county_data/incomelower48.csv")
write.csv(income, "~/output/tidy_county_data/incomelower48.csv")
write.csv(income, "output/tidy_county_data/incomelower48.csv")
# load data
files <- list.files("output/tidy_county_data", full.names=T)
tables <- lapply(files, read.csv, stringsAsFactors=F)
# build a combined state_county_fips variable in all tables that lack it
tables <- lapply(tables, function(x){
if(!"state_county_fips" %in% names(x)){
x$state_county_fips <- paste0(str_pad(x$state_fips, 2, "left", 0),
str_pad(x$county_fips, 3, "left", 0))
}else{
x$state_county_fips <- str_pad(x$state_county_fips, 5, "left", 0)
}
return(x)
})
# add dataset-specific tag to dataset-specific variable names to avoid name conflicts
for(i in 1:length(tables)) names(tables[[i]])[!grepl("_fips", names(tables[[i]]))] <-
paste0(gsub(".csv", "", basename(files[i])), "...", names(tables[[i]])[!grepl("_fips", names(tables[[i]]))])
# merge datasets
master <- Reduce(full_join, tables)
# add county area to table
counties <- readOGR("raw_data/census/us_counties_shapefile", "cb_2014_us_county_500k")
counties <- crop(counties, extent(-126, -59, 22, 53)) # crop to US48
counties <- data.frame(state_county_fips=counties$GEOID,
land_area=gArea(counties, byid=T))
master <- left_join(master, counties)
# export csv
write.csv(master, "output/master_county_data/master_county_data.csv", row.names=F)
tables <- lapply(tables, function(x){
if(!"state_county_fips" %in% names(x)){
x$state_county_fips <- paste0(str_pad(x$state_fips, 2, "left", 0),
str_pad(x$county_fips, 3, "left", 0))
}else{
x$state_county_fips <- str_pad(x$state_county_fips, 5, "left", 0)
}
return(x)
})
for(i in 1:length(tables)) names(tables[[i]])[!grepl("_fips", names(tables[[i]]))] <-
paste0(gsub(".csv", "", basename(files[i])), "...", names(tables[[i]])[!grepl("_fips", names(tables[[i]]))])
master <- Reduce(full_join, tables)
library(dplyr)
library(stringr)
library(rgdal)
library(raster)
library(rgeos)
for(i in 1:length(tables)) names(tables[[i]])[!grepl("_fips", names(tables[[i]]))] <-
paste0(gsub(".csv", "", basename(files[i])), "...", names(tables[[i]])[!grepl("_fips", names(tables[[i]]))])
master <- Reduce(full_join, tables)
files <- list.files("output/tidy_county_data", full.names=T)
tables <- lapply(files, read.csv, stringsAsFactors=F)
# build a combined state_county_fips variable in all tables that lack it
tables <- lapply(tables, function(x){
if(!"state_county_fips" %in% names(x)){
x$state_county_fips <- paste0(str_pad(x$state_fips, 2, "left", 0),
str_pad(x$county_fips, 3, "left", 0))
}else{
x$state_county_fips <- str_pad(x$state_county_fips, 5, "left", 0)
}
return(x)
})
# add dataset-specific tag to dataset-specific variable names to avoid name conflicts
for(i in 1:length(tables)) names(tables[[i]])[!grepl("_fips", names(tables[[i]]))] <-
paste0(gsub(".csv", "", basename(files[i])), "...", names(tables[[i]])[!grepl("_fips", names(tables[[i]]))])
# merge datasets
master <- Reduce(full_join, tables)
counties <- readOGR("raw_data/census/us_counties_shapefile", "cb_2014_us_county_500k")
counties <- crop(counties, extent(-126, -59, 22, 53)) # crop to US48
counties <- data.frame(state_county_fips=counties$GEOID,
land_area=gArea(counties, byid=T))
master <- left_join(master, counties)
# export csv
write.csv(master, "output/master_county_data/master_county_data.csv", row.names=F)
master_county_data <- read.csv("~/vortex/output/master_county_data/master_county_data.csv")
View(master_county_data)
master_county_data <- read.csv("~/output/master_county_data/master_county_data.csv")
master_county_data <- read.csv("../Desktop/Stat259/vortex/vortex/output/master_county_data/master_county_data.csv")
getwd()
master_county_data <- read.csv("output/master_county_data/master_county_data.csv")
View(master_county_data)
socialdata$PercUnempl<- as.numeric(master_county_data$unemployed_2014...Unemployed_2014)/master_county_data$CensusRace...TOT_POP
socialdata$PercMino<- (master_county_data$CensusRace...TOT_POP - master_county_data$CensusRace...WA)/master_county_data$CensusRace...TOT_POP
socialdata$PercHisp<- master_county_data$CensusRace...H/master_county_data$CensusRace...TOT_POP
socialdata$PercBlk<- master_county_data$CensusRace...BA/master_county_data$CensusRace...TOT_POP
socialdata$PercWh<- master_county_data$CensusRace...WA/master_county_data$CensusRace...TOT_POP
socialdata$PercAs<- master_county_data$CensusRace...AA/master_county_data$CensusRace...TOT_POP
socialdata$PercPIHI<- master_county_data$CensusRace...Na/master_county_data$CensusRace...TOT_POP
socialdata$PercAI<- master_county_data$CensusRace...AI/master_county_data$CensusRace...TOT_POP
socialdata<- master_county_data[,c("state_fips",
"county_fips",
"CensusRace...STNAME",
"CensusRace...CTYNAME",
"land_area",
"natural_amenities...Scale",
"CensusRace...TOT_POP",
"CensusRace...H",
"poverty_pct_2014...PCTPOVALL_2014")]
socialdata$PercUnempl<- as.numeric(master_county_data$unemployed_2014...Unemployed_2014)/master_county_data$CensusRace...TOT_POP
socialdata$PercMino<- (master_county_data$CensusRace...TOT_POP - master_county_data$CensusRace...WA)/master_county_data$CensusRace...TOT_POP
socialdata$PercHisp<- master_county_data$CensusRace...H/master_county_data$CensusRace...TOT_POP
socialdata$PercBlk<- master_county_data$CensusRace...BA/master_county_data$CensusRace...TOT_POP
socialdata$PercWh<- master_county_data$CensusRace...WA/master_county_data$CensusRace...TOT_POP
socialdata$PercAs<- master_county_data$CensusRace...AA/master_county_data$CensusRace...TOT_POP
socialdata$PercPIHI<- master_county_data$CensusRace...Na/master_county_data$CensusRace...TOT_POP
socialdata$PercAI<- master_county_data$CensusRace...AI/master_county_data$CensusRace...TOT_POP
socialdata$PercAI<- master_county_data$CensusRace...IA/master_county_data$CensusRace...TOT_POP
write.csv(riskdata, "output/master_county_data/cleanedrisk.csv")
riskdata<- master_county_data[,c("state_fips",
"county_fips",
"CensusRace...STNAME",
"CensusRace...CTYNAME",
"land_area",
"hail...total_intensity",
"tornado...total_intensity",
"wind...total_intensity"
)]
riskdata$highfirerisk<- master_county_data$Fire_risk_2012...risk_4+master_county_data$Fire_risk_2012...risk_5
socialdata<- master_county_data[,c("state_fips",
"county_fips",
"CensusRace...STNAME",
"CensusRace...CTYNAME",
"land_area",
"natural_amenities...Scale",
"CensusRace...TOT_POP",
"CensusRace...H",
"poverty_pct_2014...PCTPOVALL_2014")]
socialdata$PercUnempl<- as.numeric(master_county_data$unemployed_2014...Unemployed_2014)/master_county_data$CensusRace...TOT_POP
socialdata$PercMino<- (master_county_data$CensusRace...TOT_POP - master_county_data$CensusRace...WA)/master_county_data$CensusRace...TOT_POP
socialdata$PercHisp<- master_county_data$CensusRace...H/master_county_data$CensusRace...TOT_POP
socialdata$PercBlk<- master_county_data$CensusRace...BA/master_county_data$CensusRace...TOT_POP
socialdata$PercWh<- master_county_data$CensusRace...WA/master_county_data$CensusRace...TOT_POP
socialdata$PercAs<- master_county_data$CensusRace...AA/master_county_data$CensusRace...TOT_POP
socialdata$PercPIHI<- master_county_data$CensusRace...Na/master_county_data$CensusRace...TOT_POP
socialdata$PercAI<- master_county_data$CensusRace...IA/master_county_data$CensusRace...TOT_POP
## temporary fix of NAs##
#countydata<- countydata[1:3142,]
write.csv(riskdata, "output/master_county_data/cleanedrisk.csv")
write.csv(socialdata, "output/master_county_data/cleanedrisk.csv" )
socialdata<- master_county_data[,c("state_fips",
"county_fips",
"CensusRace...STNAME",
"CensusRace...CTYNAME",
"land_area",
"natural_amenities...Scale",
"CensusRace...TOT_POP",
"CensusRace...H",
"poverty_pct_2014...PCTPOVALL_2014", "incomelower48...Dollars")]
socialdata$PercUnempl<- as.numeric(master_county_data$unemployed_2014...Unemployed_2014)/master_county_data$CensusRace...TOT_POP
socialdata$PercMino<- (master_county_data$CensusRace...TOT_POP - master_county_data$CensusRace...WA)/master_county_data$CensusRace...TOT_POP
socialdata$PercHisp<- master_county_data$CensusRace...H/master_county_data$CensusRace...TOT_POP
socialdata$PercBlk<- master_county_data$CensusRace...BA/master_county_data$CensusRace...TOT_POP
socialdata$PercWh<- master_county_data$CensusRace...WA/master_county_data$CensusRace...TOT_POP
socialdata$PercAs<- master_county_data$CensusRace...AA/master_county_data$CensusRace...TOT_POP
socialdata$PercPIHI<- master_county_data$CensusRace...Na/master_county_data$CensusRace...TOT_POP
socialdata$PercAI<- master_county_data$CensusRace...IA/master_county_data$CensusRace...TOT_POP
write.csv(socialdata, "output/master_county_data/cleanedrisk.csv" )
write.csv(socialdata, "output/master_county_data/cleanedsocial.csv" )
view(socialdata)
View(socialdata)
