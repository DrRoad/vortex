library(stringr)
library(dplyr)
?readOGR
setwd("C:/Users/Carmen/Desktop/whp_2014_classified/whp2014_cls")
setwd("C:/Users/Carmen/Desktop/whp_2014_classified/")
r <- raster("whp2014_cls")
setwd("~/vortex")
counties <- readOGR("raw_data/census/us_counties_shapefile", "cb_2014_us_county_500k")
counties <- crop(counties, extent(-126, -59, 22, 53)) # crop to US48 using lat long, extent creates a box
counties$area <- gArea(counties, byid=T) # calculate area per county
counties <- spTransform(counties, crs(r)) #better to change counties because transforming a grid degrades the data
States <- data.frame()
State.names <- unique(counties$STATEFP)
for(i in State.names[5:49]) {
State <- counties[counties$STATEFP==i,]
rState <- crop(r, State)
rState <- as.data.frame(rasterToPoints(rState))
coordinates(rState) <- c("x", "y")
crs(rState) <- crs(State)
o <- over(rState, State)
d <- o %>%
mutate(value = rState$wfp_2012_classified) %>%
group_by(GEOID) %>%
summarize(mean_risk = mean(value),
max_risk = max(value),
risk_1 = length(value[value==1])/length(value),
risk_2 = length(value[value==2])/length(value),
risk_3 = length(value[value==3])/length(value),
risk_4 = length(value[value==4])/length(value),
risk_5 = length(value[value==5])/length(value),
risk_6 = length(value[value==6])/length(value),
risk_7 = length(value[value==7])/length(value))
State@data <- left_join(State@data, d)
States <- rbind(States, State@data)
}
names(r)
plot(r)
for(i in State.names[5:49]) {
State <- counties[counties$STATEFP==i,]
rState <- crop(r, State)
rState <- as.data.frame(rasterToPoints(rState))
coordinates(rState) <- c("x", "y")
crs(rState) <- crs(State)
o <- over(rState, State)
d <- o %>%
mutate(value = rState$whp2014_cls) %>%
group_by(GEOID) %>%
summarize(mean_risk = mean(value),
max_risk = max(value),
risk_1 = length(value[value==1])/length(value),
risk_2 = length(value[value==2])/length(value),
risk_3 = length(value[value==3])/length(value),
risk_4 = length(value[value==4])/length(value),
risk_5 = length(value[value==5])/length(value),
risk_6 = length(value[value==6])/length(value),
risk_7 = length(value[value==7])/length(value))
State@data <- left_join(State@data, d)
States <- rbind(States, State@data)
}
States
State.names
for(i in State.names[1:2]) {
State <- counties[counties$STATEFP==i,]
rState <- crop(r, State)
rState <- as.data.frame(rasterToPoints(rState))
coordinates(rState) <- c("x", "y")
crs(rState) <- crs(State)
o <- over(rState, State)
d <- o %>%
mutate(value = rState$whp2014_cls) %>%
group_by(GEOID) %>%
summarize(mean_risk = mean(value),
max_risk = max(value),
risk_1 = length(value[value==1])/length(value),
risk_2 = length(value[value==2])/length(value),
risk_3 = length(value[value==3])/length(value),
risk_4 = length(value[value==4])/length(value),
risk_5 = length(value[value==5])/length(value),
risk_6 = length(value[value==6])/length(value),
risk_7 = length(value[value==7])/length(value))
State@data <- left_join(State@data, d)
States <- rbind(States, State@data)
}
View(States)
setwd("C:/Users/Carmen/Desktop/whp_2014_classified/")
r <- raster("whp2014_cls")
States <- data.frame()
States
for(i in State.names[1:49]) {
State <- counties[counties$STATEFP==i,]
rState <- crop(r, State)
rState <- as.data.frame(rasterToPoints(rState))
coordinates(rState) <- c("x", "y")
crs(rState) <- crs(State)
o <- over(rState, State)
d <- o %>%
mutate(value = rState$whp2014_cls) %>%
group_by(GEOID) %>%
summarize(mean_risk = mean(value),
max_risk = max(value),
risk_1 = length(value[value==1])/length(value),
risk_2 = length(value[value==2])/length(value),
risk_3 = length(value[value==3])/length(value),
risk_4 = length(value[value==4])/length(value),
risk_5 = length(value[value==5])/length(value),
risk_6 = length(value[value==6])/length(value),
risk_7 = length(value[value==7])/length(value))
State@data <- left_join(State@data, d)
States <- rbind(States, State@data)
}
View(States)
names(States)[1] <- "state_fips"
names(States)[2] <- "county_fips"
Fire_Risk_by_County <- States
setwd("~/vortex/")
write.csv(Fire_Risk_by_County_2014, "output/tidy_county_data/Fire_risk_2012.csv", row.names=F)
Fire_Risk_by_County_2014 <- States
setwd("~/vortex/")
write.csv(Fire_Risk_by_County_2014, "output/tidy_county_data/Fire_risk_2012.csv", row.names=F)
Fire_Risk_by_County <- States
write.csv(Fire_Risk_by_County_2014, "output/tidy_county_data/Fire_risk_2012.csv", row.names=F)
write.csv(Fire_Risk_by_County, "output/tidy_county_data/Fire_risk_2012.csv", row.names=F)
write.csv(Fire_Risk_by_County, "output/tidy_county_data/Fire_risk_2014.csv", row.names=F)
nrow(Fire_Risk_by_County)
nrow(counties)
library(rgdal)
files <- list.files('output/tidy_county_data', full.names=T)
tables <- lapply(files, read.csv, stringsAsFactors=F)
setwd("~/vortex")
tables <- lapply(files, read.csv, stringsAsFactors=F)
files
files[2]
fire.test <- read.csv(files[2], stringsAsFactors = F)
View(fire.test)
1.test <- read.csv(files[1], stringsAsFactors = F)
1test <- read.csv(files[1], stringsAsFactors = F)
test1 <- read.csv(files[1], stringsAsFactors = F)
test3 <- read.csv(files[3], stringsAsFactors = F)
test4 <- read.csv(files[4], stringsAsFactors = F)
library(rio)
install.packages("rio")
library(rio)
getwd()
med.in.raw <- import("raw_data/poverty_unemployment_med_income/Unemployment.xls")
med.in <- med.in.raw[-(1:(which(med.in.raw[,1]=="FIPS_Code")-1)),] #remove the rows above the column names, held comments from original excel file
colnames(med.in) <- med.in[which(med.in[,1]=="FIPS_Code"),] #adds rownames
if (which(med.in$FIPS_Code=="FIPS_Code")!=0){med.in <- med.in[-which(med.in$FIPS_Code=="FIPS_Code"),]} #if the names are still in a row, removes.
med.in <- med.in[-which(is.na(med.in$Rural_urban_continuum_code_2003)),] #removes data for just states (leaves only counties)
if (which(names(med.in)=="FIPS_Code")!=0){names(med.in)[which(names(med.in)=="FIPS_Code")] <- "state_county_fips"} #changes FIPS code column
#to match Valeri's original format, removing Hawai'i and Alaska data to leave lower 48 and changing column name
med.in.low48 <- med.in[-which(med.in$State=="AL"|med.in$State=="HI"|med.in$State=="PR"),]
#selecting desired data
categories <- c(
"state_county_fips",
"Median_Household_Income_2014"
)
#to match Valeri's original format, changing Median_Household_Income_2014 to DOllars
med.in.low48 <- med.in.low48[,categories]
med.in.clean.2014 <- names(med.in.low48)[which(names(med.in.low48)=="Median_Household_Income_2014")] <- "Dollars"
write.csv(med.in.clean.2014,"output/tidy_county_data/incomelower48.csv",row.names=F) #writes out cleaned data; preserved original cleaned file and columns name
med.in.raw <- import("raw_data/poverty_unemployment_med_income/Unemployment.xls")
med.in <- med.in.raw[-(1:(which(med.in.raw[,1]=="FIPS_Code")-1)),] #remove the rows above the column names, held comments from original excel file
colnames(med.in) <- med.in[which(med.in[,1]=="FIPS_Code"),] #adds rownames
if (which(med.in$FIPS_Code=="FIPS_Code")!=0){med.in <- med.in[-which(med.in$FIPS_Code=="FIPS_Code"),]} #if the names are still in a row, removes.
med.in <- med.in[-which(is.na(med.in$Rural_urban_continuum_code_2003)),] #removes data for just states (leaves only counties)
if (which(names(med.in)=="FIPS_Code")!=0){names(med.in)[which(names(med.in)=="FIPS_Code")] <- "state_county_fips"} #changes FIPS code column
#to match Valeri's original format, removing Hawai'i and Alaska data to leave lower 48 and changing column name
med.in.low48 <- med.in[-which(med.in$State=="AL"|med.in$State=="HI"|med.in$State=="PR"),]
#selecting desired data
categories <- c(
"state_county_fips",
"Median_Household_Income_2014"
)
#to match Valeri's original format, changing Median_Household_Income_2014 to DOllars
med.in.low48 <- med.in.low48[,categories]
med.in.clean.2014 <- names(med.in.low48)[which(names(med.in.low48)=="Median_Household_Income_2014")] <- "Dollars"
write.csv(med.in.clean.2014,"output/tidy_county_data/incomelower48.csv",row.names=F) #writes out cleaned data; preserved original cleaned file and columns name
View(med.in)
colnames(med.in) <- med.in[which(med.in[,1]=="FIPS_Code"),] #adds rownames
if (which(med.in$FIPS_Code=="FIPS_Code")!=0){med.in <- med.in[-which(med.in$FIPS_Code=="FIPS_Code"),]} #if the names are still in a row, removes.
master_county_data <- read.csv('output/master_county_data/master_county_data.csv')
riskdata <- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'hail...total_intensity',
'tornado...total_intensity',
'wind...total_intensity'
)]
names$master_county_data
riskdata$highfirerisk <- master_county_data$Fire_risk_2014...risk_4+master_county_data$Fire_risk_2014...risk_5
riskdata <- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'hail...total_intensity',
'tornado...total_intensity',
'wind...total_intensity'
)]
riskdata$highfirerisk <- master_county_data$Fire_risk_2014...risk_4+master_county_data$Fire_risk_2014...risk_5
# Rename columns to avoid spaces
colnames(riskdata)[colnames(riskdata)=='CensusRace...STNAME'] <- 'STNAME'
colnames(riskdata)[colnames(riskdata)=='CensusRace...CTYNAME'] <- 'CTYNAME'
colnames(riskdata)[colnames(riskdata)=='hail...total_intensity'] <- 'hail_tot_intensity'
colnames(riskdata)[colnames(riskdata)=='tornado...total_intensity'] <- 'tornado_tot_intensity'
colnames(riskdata)[colnames(riskdata)=='wind...total_intensity'] <- 'wind_tot_intensity'
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP',
'CensusRace...H',
'poverty_pct_2014...PCTPOVALL_2014', 'incomelower48...Dollars',
'unemployed_2014...Unemployment_rate_2014',
'unemployed_2014...Median_Household_Income_2014')]
master_county_data <- read.csv('output/master_county_data/master_county_data.csv')
master_county_data <- read.csv('output/master_county_data/master_county_data.csv')
View(master_county_data)
#dangerous dropping of NAs
#master_county_data <-na.omit(master_county_data)
riskdata <- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'hail...total_intensity',
'tornado...total_intensity',
'wind...total_intensity'
)]
riskdata$highfirerisk <- master_county_data$Fire_risk_2014...risk_4+master_county_data$Fire_risk_2014...risk_5
# Rename columns to avoid spaces
colnames(riskdata)[colnames(riskdata)=='CensusRace...STNAME'] <- 'STNAME'
colnames(riskdata)[colnames(riskdata)=='CensusRace...CTYNAME'] <- 'CTYNAME'
colnames(riskdata)[colnames(riskdata)=='hail...total_intensity'] <- 'hail_tot_intensity'
colnames(riskdata)[colnames(riskdata)=='tornado...total_intensity'] <- 'tornado_tot_intensity'
colnames(riskdata)[colnames(riskdata)=='wind...total_intensity'] <- 'wind_tot_intensity'
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP',
'CensusRace...H',
'poverty_pct_2014...PCTPOVALL_2014', 'incomelower48...Dollars',
'unemployed_2014...Unemployment_rate_2014',
'unemployed_2014...Median_Household_Income_2014')]
master_county_data[,c('state_fips')]
master_county_data[,c('county_fips')]
master_county_data[,c('CensusRace...STNAME')]
master_county_data[,c('CensusRace...CTYNAME')]
master_county_data[,c('land_area')]
master_county_data[,c('CensusRace...CTYNAME')]
master_county_data[,c('tornado...total_intensity')]
master_county_data[,c('wind...total_intensity')]
riskdata <- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'CensusRace...CTYNAME',
'tornado...total_intensity',
'wind...total_intensity'
)]
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area')]
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP',)]
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP')]
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP',
'CensusRace...H',
'poverty_pct_2014...PCTPOVALL_2014', 'incomelower48...Dollars',
'unemployed_2014...Unemployment_rate_2014')]
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP',
'CensusRace...H')]
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP',
'CensusRace...H',
'poverty_pct_2014...PCTPOVALL_2014', 'incomelower48...Dollars')]
socialdata<- master_county_data[,c('state_fips',
'county_fips',
'CensusRace...STNAME',
'CensusRace...CTYNAME',
'land_area',
'natural_amenities...Scale',
'CensusRace...TOT_POP',
'CensusRace...H')]
#install.packages("dplyr","stringr", "rgdal", "raster", "rgeos")
# merge county-level datasets into a single master table
library(dplyr)
library(stringr)
library(rgdal)
library(raster)
library(rgeos)
#load data
files <- list.files('output/tidy_county_data', full.names=T)
tables <- lapply(files, read.csv, stringsAsFactors=F)
# build a combined state_county_fips variable in all tables that lack it
tables <- lapply(tables, function(x){
if(!'state_county_fips' %in% names(x)){
x$state_county_fips <- paste0(str_pad(x$state_fips, 2, 'left', 0),
str_pad(x$county_fips, 3, 'left', 0))
}else{
x$state_county_fips <- str_pad(x$state_county_fips, 5, 'left', 0)
}
return(x)
})
# add dataset-specific tag to dataset-specific variable names to avoid name conflicts
for(i in 1:length(tables)) names(tables[[i]])[!grepl('_fips', names(tables[[i]]))] <-
paste0(gsub('.csv', '', basename(files[i])), '...', names(tables[[i]])[!grepl('_fips', names(tables[[i]]))])
# merge datasets
master <- Reduce(full_join, tables)
# add county area to table
counties <- readOGR('raw_data/census/us_counties_shapefile', 'cb_2014_us_county_500k')
counties <- crop(counties, extent(-126, -59, 22, 53)) # crop to US48
counties <- data.frame(state_county_fips=counties$GEOID,
land_area=gArea(counties, byid=T))
master <- left_join(master, counties)
# export csv
write.csv(master, 'output/master_county_data/master_county_data.csv', row.names=F)
shiny::runApp('shiny/app1')
install.packages
install.packages("gridbase")
install.packages("gridBase")
runApp('shiny/app1')
setwd("~/documents/vortex")
setwd("~/vortex")
library(dplyr)
library(tidyr)
library(ggplot2)
select <- dplyr::select
f <- read.csv("output/master_county_data/master_county_data.csv")
# split data into race and non-race frames
race <- f[,grepl("Census|_fips", names(f))]
names(race) <- sub("CensusRace...", "", names(race))
d <- f[,!grepl("Census", names(f))]
# variables to visualize
variables <- names(d)[grepl("\\.\\.\\.", names(d))]
variables <- variables[!grepl("Fire_risk", variables) | grepl("\\.risk_", variables)] # drop fire metadata variables
# generate an exposure-by-race density plot for all variables
for(var in variables){
v <- d[,var]
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
v <- cbind(race, v) %>%
select(v, state_county_fips, TOT_POP, WA:H) %>%
select(-NH, -Na) %>%
gather(race, pop, -v, -state_county_fips, -TOT_POP) %>%
group_by(race) %>%
mutate(prop_pop = pop / sum(na.omit(pop))) %>%
na.omit()
m <- summarize(v, wmean = weighted.mean(v, pop))
name <- sub("\\.\\.\\.", ": ", var)
colors <- c("darkgoldenrod1", "black", "red", "forestgreen", "dodgerblue")
p <- ggplot(v, aes(v, weight=prop_pop, color=factor(race), fill=factor(race))) +
geom_density(adjust=2, alpha=.2, size=.25) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(race))) +
scale_fill_manual(values=colors) +
scale_color_manual(values=colors) +
theme_minimal() +
theme(axis.text.y=element_blank()) +
labs(x=name,
y="relative proportion of racial group",
title=name,
color="race", fill="race")
ggsave(paste0("output/charts/race_histograms/", var, ".png"), p, width=8, height=6)
# log scale
ggsave(paste0("output/charts/race_histograms/", var, "_log10.png"), p+scale_x_log10(), width=8, height=6)
}
# generate an exposure-by-race density plot for all variables
for(var in variables){
v <- d[,var]
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
v <- cbind(race, v) %>%
select(v, state_county_fips, TOT_POP, WA:H) %>%
select(-NH, -Na) %>%
gather(race, pop, -v, -state_county_fips, -TOT_POP) %>%
group_by(race) %>%
mutate(prop_pop = pop / sum(na.omit(pop))) %>%
na.omit()
m <- summarize(v, wmean = weighted.mean(v, pop))
name <- sub("\\.\\.\\.", ": ", var)
colors <- c("darkgoldenrod1", "black", "red", "forestgreen", "dodgerblue")
p <- ggplot(v, aes(v, weight=prop_pop, color=factor(race), fill=factor(race))) +
geom_density(adjust=2, alpha=.2, size=.25) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(race))) +
scale_fill_manual(values=colors) +
scale_color_manual(values=colors) +
theme_minimal() +
theme(axis.text.y=element_blank()) +
labs(x=name,
y="relative proportion of racial group",
title=name,
color="race", fill="race")
ggsave(paste0("output/charts/race_histograms/", var, ".png"), p, width=8, height=6)
# log scale
ggsave(paste0("output/charts/race_histograms/", var, "_log10.png"), p+scale_x_log10(), width=8, height=6)
}
dev.off()
# generate an exposure-by-race density plot for all variables
for(var in variables){
v <- d[,var]
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
v <- cbind(race, v) %>%
select(v, state_county_fips, TOT_POP, WA:H) %>%
select(-NH, -Na) %>%
gather(race, pop, -v, -state_county_fips, -TOT_POP) %>%
group_by(race) %>%
mutate(prop_pop = pop / sum(na.omit(pop))) %>%
na.omit()
m <- summarize(v, wmean = weighted.mean(v, pop))
name <- sub("\\.\\.\\.", ": ", var)
colors <- c("darkgoldenrod1", "black", "red", "forestgreen", "dodgerblue")
p <- ggplot(v, aes(v, weight=prop_pop, color=factor(race), fill=factor(race))) +
geom_density(adjust=2, alpha=.2, size=.25) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(race))) +
scale_fill_manual(values=colors) +
scale_color_manual(values=colors) +
theme_minimal() +
theme(axis.text.y=element_blank()) +
labs(x=name,
y="relative proportion of racial group",
title=name,
color="race", fill="race")
ggsave(paste0("output/charts/race_histograms/", var, ".png"), p, width=8, height=6)
# log scale
ggsave(paste0("output/charts/race_histograms/", var, "_log10.png"), p+scale_x_log10(), width=8, height=6)
}
variables
variables <- names(d)[grepl("\\.\\.\\.", names(d))]
variables <- variables[!grepl("Fire_risk", variables) | grepl("\\.risk_", variables)] # drop fire metadata variables
variables
names(variables)
var <- variables[5]
var
v <- d[,var]
v
if(class(v)=="factor") v <- as.character(v)
v <- as.numeric(v)
v <- cbind(race, v) %>%
select(v, state_county_fips, TOT_POP, WA:H) %>%
select(-NH, -Na) %>%
gather(race, pop, -v, -state_county_fips, -TOT_POP) %>%
group_by(race) %>%
mutate(prop_pop = pop / sum(na.omit(pop))) %>%
na.omit()
m <- summarize(v, wmean = weighted.mean(v, pop))
name <- sub("\\.\\.\\.", ": ", var)
colors <- c("darkgoldenrod1", "black", "red", "forestgreen", "dodgerblue")
p <- ggplot(v, aes(v, weight=prop_pop, color=factor(race), fill=factor(race))) +
geom_density(adjust=2, alpha=.2, size=.25) +
geom_vline(data=m, aes(xintercept=wmean, color=factor(race))) +
scale_fill_manual(values=colors) +
scale_color_manual(values=colors) +
theme_minimal() +
theme(axis.text.y=element_blank()) +
labs(x=name,
y="relative proportion of racial group",
title=name,
color="race", fill="race")
ggsave(paste0("output/charts/race_histograms/", var, ".png"), p, width=8, height=6)
hist(v)
head(v)
var <- variables[5]
v <- d[,var]
head(v)
v <- cbind(race, v) %>%
select(v, state_county_fips, TOT_POP, WA:H) %>%
select(-NH, -Na) %>%
gather(race, pop, -v, -state_county_fips, -TOT_POP) %>%
group_by(race) %>%
mutate(prop_pop = pop / sum(na.omit(pop))) %>%
na.omit()
m <- summarize(v, wmean = weighted.mean(v, pop))
head(m)
